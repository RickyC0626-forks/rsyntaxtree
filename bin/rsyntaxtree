#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH << File.join( File.dirname(__FILE__), '../lib')

require 'rsyntaxtree'
require 'optimist'

opts = Optimist::options do
  version "RSyntaxTree #{RSyntaxTree::VERSION} (c) 2021 Yoichiro Hasebe"
  banner <<-EOS
RSyntaxTree, (linguistic) syntax tree generator written in Ruby.

Usage:
       rsyntaxtree [options] "[VP [VP [V set] [NP bracket notation]] [ADV here]]"
where [options] are:
EOS

  opt :outdir, "Output directory",
      :default => "./"
  opt :format, "Output format: png, gif, jpg, pdf, or svg",
      :default => "png"
  opt :leafstyle, "visual style of tree leaves: auto, triangle, bar, or nothing",
      :default => "auto"
  opt :fontstyle, "Font style (available when ttf font is specified): sans, serif, cjk, math",
      :default => "sans"
  opt :font, "Path to a ttf font used to generate tree (optional)", :type => String
  opt :fontsize, "Size: 8-26",
      :default => 16
  opt :margin, "Margin: 0-5",
      :default => 0
  opt :vheight, "Connector Height: 0.5-5.0",
    :default => 1.0
  opt :color, "Color text and bars: on or off",
      :default => "on"
  opt :symmetrize, "Generate symmetrical, balanced tree: on or off",
      :default => "on"
  opt :autosub, "Put subscript numbers to nodes: on or off",
      :default => "off"
  opt :transparent, "Make background transparent: on or off",
      :default => "off"
end

Optimist::die :outdir, "must be an exsting directory path" unless FileTest::directory?(opts[:outdir])
Optimist::die :format, "must be png, jpg, gif, or svg" unless /\A(png|jpg|gif|pdf|svg)\z/ =~ opts[:format]
Optimist::die :leafstyle, "must be auto, triangle, bar, or nothing" unless /\A(auto|triangle|bar|nothing)\z/ =~ opts[:leafstyle]
Optimist::die :fontstyle, "must be sans, serif, cjk, math" unless /\A(sans|serif|cjk|math)\z/ =~ opts[:fontstyle]
Optimist::die :font, "must be path to an existing ttf font" if opts[:font] && !File::exists?(opts[:font])
Optimist::die :fontsize, "must be in the range of 8-26" unless opts[:fontsize] >= 8 && opts[:fontsize] <= 26
Optimist::die :color, "must be either on or off" unless /\A(on|off)\z/ =~ opts[:color]
Optimist::die :symmetrize, "must be either on or off" unless /\A(on|off)\z/ =~ opts[:symmetrize]
Optimist::die :autosub, "must be either on or off" unless /\A(on|off)\z/ =~ opts[:autosub]
Optimist::die :margin, "must be in the range of 0-5" if opts[:margin] < 0 || opts[:margin] > 5 
Optimist::die :vheight, "must be in the range of 0.5-5.0" if opts[:vheight] < 0.5 || opts[:vheight] > 5.0
Optimist::die :transparent, "must be either on or off" unless /\A(on|off)\z/ =~ opts[:transparent]

string_opts = {}
opts.each do |key, value|
  string_opts[key.to_sym] = value unless key == :font && !value
end

data = ARGV[0]

unless data && RSGenerator.check_data(data)
  puts "Error: given bracket notation is invalid; try 'rsyntaxtree --help' "
  exit
end

string_opts[:data] = data

rsg = RSGenerator.new(string_opts)
ext = string_opts[:format]
outfile = File.new(File.expand_path(string_opts[:outdir]) + "/syntree." + ext, "wb")
case ext
when "png"
  outfile.write rsg.draw_png
when "jpg"
  outfile.write rsg.draw_jpg
when "gif"
  outfile.write rsg.draw_gif
when "pdf"
  outfile.write rsg.draw_pdf
when "svg"
  outfile.write rsg.draw_svg
end
outfile.close
